/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Node;

import Node.thrift.NodeConfig;
import Node.thrift.NodeConfigRPCServer;

import java.util.logging.Logger;

public class Main {

    /* Logger */
    private static final Logger LOGGER = Logger.getLogger("MAIN");

    /* Format Logger output */
    static {
        System.setProperty("java.util.logging.SimpleFormatter.format",
                "[%1$tF %1$tT][%4$-7s][%3$-19s] %5$s %n");
    }


    /**
     * Main function of node class
     *
     * Uses environment variables to create a node.
     * The Node send data to its masterNode in time intervals specified by sendrate.
     *
     * @param args
     */
    public static void main(String[] args) {

            try {
                // get environment variables
                String id                   = System.getenv("ID");
                Character type              = System.getenv("TYPE").toCharArray()[0];
                String name                 = System.getenv("NAME");
                Integer valueMin            = Integer.valueOf(System.getenv("VALUEMIN"));
                Integer valueMax            = Integer.valueOf(System.getenv("VALUEMAX"));
                Integer masterNodeId        = Integer.valueOf(System.getenv("MASTERNODEID"));
                Integer sendrate            = Integer.valueOf(System.getenv("SENDRATE"));
                Integer corruptDataRate     = Integer.valueOf(System.getenv("CORRUPTDATARATE"));
                Integer RPCPort             = Integer.valueOf(System.getenv("RPCPORT"));

                String connectionType       = System.getenv("CONNECTIONTYPE");

                // Either setup UDP or MQTT connection
                if (!connectionType.isEmpty()) {
                    if (connectionType.equals("UDP")) {
                        LOGGER.info("Setting up connection type UDP\n");
                        Integer masterNodePort      = Integer.valueOf(System.getenv("MASTERNODEPORT"));

                        // Create Node using UDP and setup parameters
                        Node node = new Node(
                                id,
                                type,
                                name,
                                connectionType,
                                valueMin,
                                valueMax,
                                masterNodeId,
                                masterNodePort,
                                sendrate,
                                corruptDataRate
                        );

                        // Start Node
                        node.start();

                        // Create NodeConfig RPC-Server
                        NodeConfigRPCServer nodeConfigServer = new NodeConfigRPCServer(node, RPCPort);

                        // Start RPC Server
                        nodeConfigServer.start();

                    } else if (connectionType.equals("MQTT")) {
                        LOGGER.info("Setting up connection type MQTT\n");
                        String mqttBrokerAddress    = System.getenv("MQTTBROKERADDRESS");
                        String mqttBrokerPort       = System.getenv("MQTTBROKERPORT");

                        // Create Node using MQTT and setup parameters
                        Node node = new Node(
                                id,
                                type,
                                name,
                                connectionType,
                                valueMin,
                                valueMax,
                                masterNodeId,
                                sendrate,
                                corruptDataRate,
                                mqttBrokerAddress,
                                mqttBrokerPort
                                );

                        // Start Node
                        node.start();

                        // Create NodeConfig RPC-Server
                        NodeConfigRPCServer nodeConfigServer = new NodeConfigRPCServer(node, RPCPort);

                        // Start RPC Server
                        nodeConfigServer.start();

                    } else {
                        LOGGER.severe("Unknown connection type! Please provide a valid connection type (UDP or MQTT).\n");
                        System.exit(1);
                    }
                }


            } catch (NullPointerException ne) {
                LOGGER.severe("Missing environment variables! Please provide all necessary environment variables.\n"+ne.getMessage());
                System.exit(1);
            }
    }
}
